<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Net;
using System.Web;
using System.Web.Mvc;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var contextTypeName = ContextTypeName;
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = EntitySetVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = ModelVariable[0];
    var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);

    string bindAttribute;
    if (IsOverpostingProtectionRequired)
    {
        bindAttribute = String.Format("[Bind(Include = \"{0}\")] ", BindAttributeIncludeText);
    }
    else
    {
        bindAttribute = String.Empty;
    }
#>
    public class <#= ControllerName #> : Controller
    {

	    private <#= ContextTypeName #> db = new <#= ContextTypeName #>();

	    //
        // We don't have enough time to put comments, Sorry!
        // 
<# if (UseAsync) { #>
        public async Task<ActionResult> List()
<# } else { #>
        public ActionResult List()
<# } #>
        {
		try
		{

<#  var includeExpressions = "";
        includeExpressions = String.Join("", relatedProperties.Values.Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
#>
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
            var list = db.<#= entitySetName #><#= includeExpressions #>;
<#		if (UseAsync) { #>
            return View(await list.ToListAsync());
<#		} else { #>
            return View(list.ToList());
<#		} #>
<# } else { #>
<#		if (UseAsync) { #>
            return View(await db.<#= entitySetName #><#= includeExpressions #>.ToListAsync());
<#		} else { #>
            return View(db.<#= entitySetName #><#= includeExpressions #>.ToList());
<#		} #>
<# } #>
        }
		
		    catch
            {
                return new HttpStatusCodeResult(HttpStatusCode.InternalServerError);
            }
        }
		//
        // We don't have enough time tou put comments, Sorry!
        // 
<# if (UseAsync) { #>
        public async Task<ActionResult> Details(<#= primaryKeyNullableTypeName #> PK_Id)
<# } else { #>
        public ActionResult Details(<#= primaryKeyNullableTypeName #> PK_Id)
<# } #>
        {
		try
		{
            if (PK_Id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
<# if (UseAsync) { #>
            <#= ModelTypeName #> findResult = await db.<#= entitySetName #>.FindAsync(PK_Id);
<# } else { #>
            <#= ModelTypeName #> findResult = db.<#= entitySetName #>.Find(PK_Id);
<# } #>
            if (findResult == null) { return HttpNotFound(); }
            return View(findResult);
		}
		            catch
            {
                return new HttpStatusCodeResult(HttpStatusCode.InternalServerError);
            }
		}
		//
        // We don't have enough time to put comments, Sorry!
        // 
        public ActionResult AddNew()
        {
		try
		{
		using(var db = new <#= ContextTypeName #>())
		{
<# foreach (var property in relatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>");
<# } #>
            return View();
			}
			}
			            catch
            {
                return new HttpStatusCodeResult(HttpStatusCode.InternalServerError);
            }
        }
		//
        // We don't have enough time tou put comments, Sorry!
        // 
        [HttpPost]
        [ValidateAntiForgeryToken]
<# if (UseAsync) { #>
        public async Task<ActionResult> AddNew(<#= ModelTypeName #> add)
<# } else { #>
        public ActionResult AddNew(<#= ModelTypeName #> add)
<# } #>
        {
		try
		{
            if (ModelState.IsValid)
            {
<# if(!String.IsNullOrEmpty(primaryKeyType) && String.Equals("System.Guid", primaryKeyType, StringComparison.OrdinalIgnoreCase)) { #>
                <#= ModelVariable #>.<#= primaryKeyName #> = Guid.NewGuid();
<# } #>
                db.<#= entitySetName #>.Add(add);
<# if (UseAsync) {#>
                await db.SaveChangesAsync();
<# } else { #>
                db.SaveChanges();
<# } #>
                return RedirectToAction("List");
            }

<# foreach (var property in relatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", add.<#= property.ForeignKeyPropertyNames[0] #>);
<# } #>
            return View(add);
		}
		            catch
            {
                return new HttpStatusCodeResult(HttpStatusCode.InternalServerError);
            }
		}
		//
        // We don't have enough time to put comments, Sorry!
        // 
<# if (UseAsync) { #>
        public async Task<ActionResult> Update(<#= primaryKeyNullableTypeName #> PK_Id)
<# } else { #>
        public ActionResult Update(<#= primaryKeyNullableTypeName #> PK_Id)
<# } #>
        {
		try
		{
            if (PK_Id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
<# if (UseAsync) { #>
            <#= ModelTypeName #> findResult = await db.<#= entitySetName #>.FindAsync(PK_Id);
<# } else { #>
            <#= ModelTypeName #> findResult = db.<#= entitySetName #>.Find(PK_Id);
<# } #>
            if(findResult==null){ return HttpNotFound();}

<# foreach (var property in relatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", findResult.<#= property.ForeignKeyPropertyNames[0] #>);
<# } #>
            return View(findResult);
		}
		            catch
            {
                return new HttpStatusCodeResult(HttpStatusCode.InternalServerError);
            }
		}
		//
        // We don't have enough time to put comments, Sorry!
        // 
        [HttpPost]
        [ValidateAntiForgeryToken]
<# if (UseAsync) { #>
        public async Task<ActionResult> Update(<#= ModelTypeName #> update)
<# } else { #>
        public ActionResult Update(<#= ModelTypeName #> update)
<# } #>
        {
		try
		{
            if (ModelState.IsValid)
            {
                db.Entry(update).State = EntityState.Modified;
<# if (UseAsync) { #>
                await db.SaveChangesAsync();
<# } else { #>
                db.SaveChanges();
<# } #>
                return RedirectToAction("List");
            }
<# foreach (var property in relatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", update.<#= property.ForeignKeyPropertyNames[0] #>);
<# } #>
            return View(update);
		}
		            catch
            {
                return new HttpStatusCodeResult(HttpStatusCode.InternalServerError);
            }
		}
		//
        // We don't have enough time to put comments, Sorry!
        // 
<# if (UseAsync) { #>
        public async Task<ActionResult> Remove(<#= primaryKeyNullableTypeName #> PK_Id)
<# } else { #>
        public ActionResult Remove(<#= primaryKeyNullableTypeName #> PK_Id)
<# } #>
        {
		try
		{
            if (PK_Id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
<# if (UseAsync) { #>
            <#= ModelTypeName #> findResult = await db.<#= entitySetName #>.FindAsync(PK_Id);
<# } else { #>
            <#= ModelTypeName #> findResult = db.<#= entitySetName #>.Find(PK_Id);
<# } #>
            if (findResult == null) { return HttpNotFound(); }
            return View(findResult);
		}
		            catch
            {
                return new HttpStatusCodeResult(HttpStatusCode.InternalServerError);
            }
		}
		//
        // We don't have enough time to put comments, Sorry!
        // 
        [HttpPost, ActionName("Remove")]
        [ValidateAntiForgeryToken]
<# if (UseAsync) { #>
        public async Task<ActionResult> RemoveConfirmed(<#= primaryKeyShortTypeName #> PK_Id)
<# } else { #>
        public ActionResult RemoveConfirmed(<#= primaryKeyShortTypeName #> PK_Id)
<# } #>
        {
		try
		{

<# if (UseAsync) { #>
            <#= ModelTypeName #> findResult = await db.<#= entitySetName #>.FindAsync(PK_Id);
<# } else { #>
            <#= ModelTypeName #> findResult = db.<#= entitySetName #>.Find(PK_Id);
<# } #>
            db.<#= entitySetName #>.Remove(findResult);
<# if (UseAsync) { #>
            await db.SaveChangesAsync();
<# } else { #>
            db.SaveChanges();
<# } #>
            return RedirectToAction("List");
		}
		            catch
            {
                return new HttpStatusCodeResult(HttpStatusCode.InternalServerError);
            }
		}
		//
		// We don't have enough time to put comments, Sorry!
		//
		        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }


    }
}

<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
#>