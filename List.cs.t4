<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model IEnumerable<#= "<" + ViewDataTypeName + ">" #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}
<br>
<h2>
<#= ViewName#> <span class="text-muted"> | </span>
    @Html.ActionLink("-|- Add New", "AddNew", null, htmlAttributes: new { @class = "btn btn-success btn-sm", style = "margin-left:10px;" })
    @Html.ActionLink("Refresh", "List", null, htmlAttributes: new { @class = "btn btn-primary btn-sm", style = "margin-left:10px;" })
</h2>
<hr>
<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<table class="table" id="mytable">
<thead>
    <tr>
<#
IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        // We do not want to show any association properties for which there is
        // no associated foreign key.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
#>
        <th>
            @Html.DisplayNameFor(model => model.<#= GetValueExpression(property) #>)
        </th>
<#
    }
}
#>
        <th></th>
    </tr>
	</thead>
	<tbody>
@foreach (var item in Model) {
    <tr>
<#
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        // We do not want to show any association properties for which there is
        // no associated foreign key.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
#>
        <td>
            @Html.DisplayFor(modelItem => <#= "item." + GetValueExpression(property) #>)
        </td>
<#
    }
}

string pkName = GetPrimaryKeyName();
if (pkName != null) {
#>
        <td>

			<div class="btn-group btn-group-sm" role="group" aria-label="Button group with nested dropdown">
                <div class="btn-group" role="group">
                    <a id="btnGroupDrop" href="#" type="button" class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Option</a>
                    <div class="dropdown-menu" aria-labelledby="btnGroupDrop">
                        @Html.ActionLink("Update", "Update", new { PK_Id=item.<#= pkName #> },new { @class = "dropdown-item" })
                        @Html.ActionLink("Details", "Details", new { PK_Id=item.<#= pkName #>}, new { @class = "dropdown-item" })
                        @Html.ActionLink("Remove", "Remove", new { PK_Id=item.<#= pkName #>}, new { @class = "dropdown-item text-danger" })
                    </div>
                </div>
            </div>


        </td>
<#
} else {
#>
        <td>
		    <div class="btn-group btn-group-sm" role="group" aria-label="Button group with nested dropdown">
                <div class="btn-group" role="group">
                    <a id="btnGroupDrop" href="#" type="button" class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Option</a>
                    <div class="dropdown-menu" aria-labelledby="btnGroupDrop">
                        @Html.ActionLink("Update", "Update", new { /* PK_Id=item.PrimaryKey */ },new { @class = "dropdown-item" })
                        @Html.ActionLink("Details", "Details", new { /* PK_Id=item.PrimaryKey */}, new { @class = "dropdown-item" })
                        @Html.ActionLink("Remove", "Remove", new { /* PK_Id=item.PrimaryKey */}, new { @class = "dropdown-item text-danger" })
                    </div>
                </div>
            </div>

        </td>
<#
}
#>
    </tr>
}
</tbody>
</table>

<script type="text/javascript">
    $(document).ready(function () {
        $('#mytable').DataTable({
            dom: 'Bfrtip',
            buttons: [
                { extend: 'copy' },
                { extend: 'csv' },
                { extend: 'excel' },
                { extend: 'pdf' },
                { extend: 'print' },
            ]
        });
    });
</script>


<link href="~/Content/DataTables/css/jquery.dataTables.min.css" rel="stylesheet" />
<script src="~/Scripts/DataTables/jquery.dataTables.js"></script>
<link href="~/Scripts/Datatable/Export/buttons.dataTables.min.css" rel="stylesheet" />
<script src="~/Scripts/Datatable/Export/buttons.flash.min.js"></script>
<script src="~/Scripts/Datatable/Export/buttons.html5.min.js"></script>
<script src="~/Scripts/Datatable/Export/buttons.print.min.js"></script>
<script src="~/Scripts/Datatable/Export/dataTables.buttons.min.js"></script>
<script src="~/Scripts/Datatable/Export/jszip.min.js"></script>
<script src="~/Scripts/Datatable/Export/pdfmake.min.js"></script>
<script src="~/Scripts/Datatable/Export/vfs_fonts.js"></script>



<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>



<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>